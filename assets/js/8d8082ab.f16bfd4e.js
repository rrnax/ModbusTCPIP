"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[789],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(b,s(s({ref:n},u),{},{components:t})):r.createElement(b,s({ref:n},u))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1,slug:"/"},s=void 0,i={unversionedId:"ModbusTCP_IP",id:"ModbusTCP_IP",title:"ModbusTCP_IP",description:"Library writed in C# about Modbus protocole via TCP/IP connection. This library allows connection with slave by Sockets and communication with this slave by Modbus protocol using function's codes in Modbus frames. Also project gives classes to create and decode Modbus frames with error handling. Library inlcudes unit tests for better understanding of classes and their methods.",source:"@site/docs/ModbusTCP_IP.md",sourceDirName:".",slug:"/",permalink:"/ModbusTCPIP/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"ModbusConnection",permalink:"/ModbusTCPIP/ModbusConnection"}},l={},c=[{value:"Examples",id:"examples",level:2}],u={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Library writed in C# about Modbus protocole via TCP/IP connection. This library allows connection with slave by Sockets and communication with this slave by Modbus protocol using function's codes in Modbus frames. Also project gives classes to create and decode Modbus frames with error handling. Library inlcudes unit tests for better understanding of classes and their methods."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Connect with slave and read holding registers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using ModbusTCPIP;\n\nstring slaveIP = "192.167.8.11";\nint slavePort = 502;\nModbusConnection mySlave = new ModbusConnection(slaveIP, slavePort);\nint registerAddress = 1;\nint range = 20;\n\nmySlave.Connect();\nList<int> slaveRegisters = mySlave.ReadMultipleHoldingRegisters(registerAddress, range);\nmySlave.Disconnect();\n')),(0,a.kt)("p",null,"Connect with slave write and then read holding Register values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using ModbusTCPIP;\n\nstring slaveIP = "192.167.8.11";\nint slavePort = 502;\nModbusConnection mySlave = new ModbusConnection(slaveIP, slavePort);\nint registerAddress = 1;\nint range = 7;\nint[] values = { 122, 1111, 334, 1, 7688, 21000, 50 };\n\nmySlave.Connect();\nmySlave.WriteMultipleHoldingRegisters(registerAddress, range, values);\nList<int> slaveRegisters = mySlave.ReadMultipleHoldingRegisters(registerAddress, range);\nmySlave.Disconnect();\n')),(0,a.kt)("p",null,"Create frame for communication:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"using ModbusTCPIP;\n\nint unitId = 1;\nint function = 3;\nint[] parametrs = { 3, 10 };\nint[] values = { 122, 1111, 334, 1, 7688, 21000, 50 };\n\n//Generally\nbyte[] frame = ModBusFrameCreator.CreateFrame(unitId, function, parametrs);\n\n//Partly\nbyte[] header = ModBusFrameCreator.CreateMBAPHeader(unitId, 2);\nbyte[] pduR = ModBusFrameCreator.ReadingPDU(parametrs[0], parametrs[1], function); //For read functions\nbyte[] pduW = ModBusFrameCreator.MultipleWritingPDU(parametrs[0], parametrs[1], function, values); //For write multiple, but you can also write Single\nframe = header.Concat(pduR).ToArray(); //Concat at the end\n")),(0,a.kt)("p",null,"Decode frame:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"using ModbusTCPIP;\n\nint unitId = 1;\nint function = 3;\nint[] parametrs = { 3, 10 };\n\nbyte[] frame = ModBusFrameCreator.CreateFrame(unitId, function, parametrs);\nList<int> decoded = new ModbusFrameObject(frame).DecodeRegisters();\n")))}p.isMDXComponent=!0}}]);